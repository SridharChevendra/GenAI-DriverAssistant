Transform: AWS::Serverless-2016-10-31
Parameters:
  AwsAccountName:
    Type: String
    Description: AWS account name for S3 bucket prefix
  EnvironmentName:
    Type: String
    Default: dev
    Description: Environment name for resource naming

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
      RoleName: DDA-Lambda-Execution-role

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub dda-${AwsAccountName}-${AWS::AccountId}

  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /claims:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda1.Arn}/invocations
              responses: {}
          /carinfo:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda2.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
  Lambda1:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Lambda1
      InlineCode: |
        import json
        def handler(event, context):
            return {
                'statusCode': 200,
                'body': json.dumps('Hello from Claims Lambda!')
            }
      Handler: index.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        ApiGETclaims:
          Type: Api
          Properties:
            Path: /claims
            Method: GET
            RestApiId: !Ref Api

  Lambda1LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${Lambda1}
  Lambda2:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Lambda2
      InlineCode: |
        import json
        def handler(event, context):
            return {
                'statusCode': 200,
                'body': json.dumps('Hello from Claims Lambda!')
            }
      Handler: index.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        ApiGETcarinfo:
          Type: Api
          Properties:
            Path: /carinfo
            Method: GET
            RestApiId: !Ref Api
  
  Lambda2LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${Lambda2}

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0aa7d40eeae50c9a9 # Amazon Linux 2 AMI
      InstanceType: t2.nano
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref PublicSubnet

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP on port 8081
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8081
          ToPort: 8081
          CidrIp: 0.0.0.0/0
      VpcId: !Ref DefaultVPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DefaultVPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.0.0/24

  DefaultVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: DefaultVPC